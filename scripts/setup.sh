#!/bin/bash

# FoodShorts Setup Script
echo "üöÄ Configurando FoodShorts..."

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    log_error "Execute este script na raiz do projeto FoodShorts"
    exit 1
fi

log_info "Bem-vindo ao setup do FoodShorts! üçï"
echo ""

# Check Node.js
log_info "Verificando Node.js..."
if ! command -v node &> /dev/null; then
    log_error "Node.js n√£o encontrado!"
    echo "Instale Node.js 18+ de: https://nodejs.org/"
    exit 1
fi

NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    log_error "Node.js vers√£o 18+ √© necess√°ria. Vers√£o atual: $(node -v)"
    echo "Atualize em: https://nodejs.org/"
    exit 1
fi

log_success "Node.js $(node -v) ‚úÖ"

# Check npm
if ! command -v npm &> /dev/null; then
    log_error "npm n√£o encontrado!"
    exit 1
fi

log_success "npm $(npm -v) ‚úÖ"

# Check/Install Expo CLI
log_info "Verificando Expo CLI..."
if ! command -v expo &> /dev/null; then
    log_info "Instalando Expo CLI..."
    npm install -g @expo/cli
    if [ $? -eq 0 ]; then
        log_success "Expo CLI instalado ‚úÖ"
    else
        log_warning "Falha ao instalar Expo CLI"
    fi
else
    log_success "Expo CLI $(expo --version) ‚úÖ"
fi

# Install dependencies
log_info "Instalando depend√™ncias..."
npm install
if [ $? -ne 0 ]; then
    log_error "Falha ao instalar depend√™ncias"
    exit 1
fi
log_success "Depend√™ncias instaladas ‚úÖ"

# Setup environment files
log_info "Configurando arquivos de ambiente..."

# Server .env
if [ ! -f "apps/server/.env" ]; then
    cp apps/server/.env.example apps/server/.env
    log_success "Criado apps/server/.env"
else
    log_info "apps/server/.env j√° existe"
fi

# Web .env
if [ ! -f "apps/web/.env.local" ]; then
    cp apps/web/.env.local.example apps/web/.env.local
    log_success "Criado apps/web/.env.local"
else
    log_info "apps/web/.env.local j√° existe"
fi

# Check PostgreSQL
log_info "Verificando PostgreSQL..."
if command -v psql &> /dev/null; then
    log_success "PostgreSQL encontrado ‚úÖ"
    
    # Try to connect to default database
    if psql -h localhost -p 5432 -U postgres -c "SELECT 1;" &> /dev/null; then
        log_success "Conex√£o com PostgreSQL OK ‚úÖ"
        
        # Create database if it doesn't exist
        log_info "Criando database foodshorts..."
        psql -h localhost -p 5432 -U postgres -c "CREATE DATABASE foodshorts;" 2>/dev/null || log_info "Database j√° existe"
        
    else
        log_warning "N√£o foi poss√≠vel conectar ao PostgreSQL"
        echo "Certifique-se de que o PostgreSQL est√° rodando na porta 5432"
        echo "Usu√°rio: postgres (sem senha)"
    fi
else
    log_warning "PostgreSQL n√£o encontrado"
    echo "Instale PostgreSQL 15+ de: https://www.postgresql.org/download/"
fi

# Setup database
log_info "Configurando banco de dados..."
cd apps/server

# Generate Prisma client
npm run db:generate
if [ $? -eq 0 ]; then
    log_success "Prisma client gerado ‚úÖ"
else
    log_warning "Falha ao gerar Prisma client (verifique configura√ß√£o do DB)"
fi

# Run migrations
npm run db:migrate 2>/dev/null
if [ $? -eq 0 ]; then
    log_success "Migra√ß√µes executadas ‚úÖ"
else
    log_warning "Falha nas migra√ß√µes (verifique configura√ß√£o do DB)"
fi

cd ../..

# Build packages
log_info "Construindo packages compartilhados..."
npm run build --workspace=@foodshorts/config --if-present
npm run build --workspace=@foodshorts/ui --if-present
log_success "Packages constru√≠dos ‚úÖ"

# Make scripts executable
chmod +x scripts/*.sh
log_success "Scripts tornados execut√°veis ‚úÖ"

# Setup complete
echo ""
log_success "üéâ Setup conclu√≠do com sucesso!"
echo ""
echo "üìù Pr√≥ximos passos:"
echo ""
echo "1. Configure as vari√°veis de ambiente:"
echo "   ‚Ä¢ apps/server/.env (DATABASE_URL, JWT_SECRET, etc.)"
echo "   ‚Ä¢ apps/web/.env.local (CLERK_SECRET_KEY, etc.)"
echo ""
echo "2. Inicie o ambiente de desenvolvimento:"
echo "   ‚Ä¢ ./scripts/dev.sh"
echo ""
echo "3. Acesse os servi√ßos:"
echo "   ‚Ä¢ API: http://localhost:3001/health"
echo "   ‚Ä¢ Admin: http://localhost:3002"
echo "   ‚Ä¢ Mobile: Expo DevTools"
echo ""
echo "üìö Documenta√ß√£o:"
echo "   ‚Ä¢ README.md - Informa√ß√µes gerais"
echo "   ‚Ä¢ FoodShorts_spec_v1.3.md - Especifica√ß√£o completa"
echo ""
echo "üÜò Suporte:"
echo "   ‚Ä¢ GitHub Issues"
echo "   ‚Ä¢ suporte@foodshorts.com"
echo ""

# Check for common issues
echo "üîç Verificando configura√ß√£o..."

# Check if ports are available
if nc -z localhost 3001 2>/dev/null; then
    log_warning "Porta 3001 est√° em uso (pode conflitar com o backend)"
fi

if nc -z localhost 3002 2>/dev/null; then
    log_warning "Porta 3002 est√° em uso (pode conflitar com admin web)"
fi

# Check disk space
DISK_USAGE=$(df . | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 90 ]; then
    log_warning "Pouco espa√ßo em disco dispon√≠vel ($DISK_USAGE% usado)"
fi

log_success "Verifica√ß√£o conclu√≠da ‚úÖ"
echo ""
echo "üçï FoodShorts est√° pronto para desenvolvimento!"